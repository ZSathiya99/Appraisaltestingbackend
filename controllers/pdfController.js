const PDFDocument = require('pdfkit');
const TeachingRecord = require('../models/TeachingRecord');
const Employee = require('../models/Employee');

exports.generateTeachingReportPDF = async (req, res) => {
  try {
    const { facultyName, designation } = req.body;

    // Validate input
    if (!facultyName || !designation) {
      return res.status(400).json({ message: 'facultyName and designation are required' });
    }

    // Fetch the teaching record
    const record = await TeachingRecord.findOne({ facultyName, designation }).populate('employee');
    if (!record) return res.status(404).json({ message: 'No record found for this faculty' });

    // Update submission status
    record.isSubmitted = true;
    await record.save();

    if (record.employee) {
      await Employee.findByIdAndUpdate(record.employee._id, { formStatus: 'Submitted' });
    }

    // Create a new PDF document
    const doc = new PDFDocument({ margin: 50, size: 'A4' });

    // Set headers to download PDF
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${facultyName}-teaching-report.pdf"`);

    doc.pipe(res);

    // ===== PDF CONTENT =====
    // Title
    doc.font('Helvetica-Bold').fontSize(20).text('Teaching Record Submission', { align: 'center' });
    doc.moveDown(1);

    // Employee & Form Info
    doc.font('Helvetica').fontSize(12);
    doc.text(`Faculty Name: ${facultyName}`);
    doc.text(`Designation: ${designation}`);
    doc.text(`Department: ${record.employee?.department || 'N/A'}`);
    doc.text(`Email: ${record.employee?.email || 'N/A'}`);
    doc.text(`Form Status: ${record.isSubmitted ? 'Submitted' : 'Pending'}`);
    doc.text(`Submission Date: ${new Date().toLocaleDateString()}`);
    doc.moveDown(1);

    // Table-like Section Marks
    const sections = [
      { key: 'teachingAssignment', label: 'Teaching Assignment' },
      { key: 'passPercentage', label: 'Pass Percentage' },
      { key: 'feedback', label: 'Student Feedback' },
      { key: 'innovativeApproach', label: 'Innovative Approach' },
      { key: 'visitingFaculty', label: 'Guest Lectures' },
      { key: 'fdpFunding', label: 'FDP Funding' },
      { key: 'innovationProject', label: 'Innovation Project' },
      { key: 'fdp', label: 'FDP Programme' },
      { key: 'industry', label: 'Industry Involvement' },
      { key: 'tutorMeeting', label: 'Tutor-Ward Meeting' },
      { key: 'academicPosition', label: 'Academic Roles' }
    ];

    let startY = doc.y;
    const tableX = 50;
    const tableWidth = 500;
    const rowHeight = 25;

    // Table Header
    doc.font('Helvetica-Bold').fillColor('white');
    doc.rect(tableX, startY, tableWidth, rowHeight).fill('#4a90e2');
    doc.fillColor('white').text('Section', tableX + 10, startY + 7);
    doc.text('Marks', tableX + 400, startY + 7);
    startY += rowHeight;

    doc.font('Helvetica').fillColor('black');

    let totalMarks = 0;
    sections.forEach((section, index) => {
      const data = record[section.key];
      const isEven = index % 2 === 0;
      // Row background
      doc.rect(tableX, startY, tableWidth, rowHeight).fill(isEven ? '#f2f2f2' : '#ffffff').fillColor('black');
      // Row text
      doc.text(section.label, tableX + 10, startY + 7);
      doc.text(data && data.marks !== undefined ? data.marks : '0', tableX + 400, startY + 7);
      startY += rowHeight;
      if (data && data.marks !== undefined) totalMarks += Number(data.marks);
    });

    // Total Marks Row
    doc.font('Helvetica-Bold').fillColor('white');
    doc.rect(tableX, startY, tableWidth, rowHeight).fill('#4a90e2');
    doc.fillColor('white').text('Total Marks', tableX + 10, startY + 7);
    doc.text(totalMarks, tableX + 400, startY + 7);
    startY += rowHeight;

    // Footer
    doc.moveDown(2);
    doc.font('Helvetica-Oblique').fontSize(10).fillColor('black').text(
      'Generated by the Teaching Management System',
      { align: 'center' }
    );

    // Finalize PDF
    doc.end();
  } catch (error) {
    console.error('Error generating PDF:', error);
    res.status(500).json({ message: 'Server error while generating PDF' });
  }
};
