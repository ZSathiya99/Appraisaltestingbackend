const PDFDocument = require("pdfkit");
const PDFMerger = require("pdf-merger-js").default;
const path = require("path");
const fs = require("fs");

const logoPath = path.join(__dirname, "..", "images", "clg-logo.png"); // Update path if needed
const themeBlue = "#004080"; // College theme color

// === Create PDF Buffer with New Style ===
async function createStyledFormPDFBuffer(record, formTitle, sections, includeFileStatus = false) {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ margin: 50, size: "A4" });
    const buffers = [];
    doc.on("data", buffers.push.bind(buffers));
    doc.on("end", () => resolve(Buffer.concat(buffers)));
    doc.on("error", reject);

    try {
      /** === HEADER LOGO (Center) === **/
      if (fs.existsSync(logoPath)) {
        doc.image(logoPath, doc.page.width / 2 - 50, 50, { width: 100 });
      }
      doc.moveDown(3);

      /** === FORM TITLE === **/
      doc.font("Helvetica-Bold").fontSize(18).fillColor(themeBlue).text(formTitle, { align: "center" });
      doc.moveDown(0.5);
      doc.font("Helvetica-Oblique").fontSize(8).fillColor("black")
        .text("(Assessment period details are considered for this report)", { align: "center" });
      doc.moveDown(2);

      /** === FACULTY / EMPLOYEE INFO === **/
      const details = [
        { label: "Faculty Name", value: record.facultyName || "N/A" },
        { label: "Designation", value: record.designation || "N/A" },
        { label: "Department", value: record.employee?.department || "N/A" },
        { label: "Email", value: record.employee?.email || "N/A" },
        { label: "Form Status", value: record.isSubmitted ? "Submitted" : "Pending" },
        { label: "Generated On", value: new Date().toLocaleDateString() }
      ];

      details.forEach(item => {
        doc.font("Helvetica-Bold").fontSize(12).text(`${item.label}: `, { continued: true });
        doc.font("Helvetica").text(item.value);
        doc.moveDown(0.7);
      });
      doc.moveDown(1);

      /** === MARKS TABLE === **/
      let startY = doc.y;
      const tableX = 50;
      const tableWidth = 500;
      const rowHeight = 30;
      let totalMarks = 0;

      // Table Header
      doc.font("Helvetica-Bold").fillColor("white");
      doc.rect(tableX, startY, tableWidth, rowHeight).fill(themeBlue);
      doc.fillColor("white").text("Section", tableX + 10, startY + 7);
      doc.text("Marks", tableX + 400, startY + 7);
      startY += rowHeight;

      // Table Rows
      doc.font("Helvetica").fillColor("black");
      sections.forEach((section, index) => {
        const data = record[section.key];
        const isEven = index % 2 === 0;

        doc.rect(tableX, startY, tableWidth, rowHeight)
          .fill(isEven ? "#f9f9f9" : "#ffffff")
          .stroke();

        doc.font("Helvetica-Bold").fillColor("black").text(section.label, tableX + 10, startY + 7);
        doc.font("Helvetica").fillColor("#333333")
          .text(data?.marks ?? "0", tableX + 400, startY + 7);

        if (data?.marks) totalMarks += Number(data.marks);
        startY += rowHeight;
      });

      // Total Row
      doc.font("Helvetica-Bold").fillColor("white");
      doc.rect(tableX, startY, tableWidth, rowHeight).fill(themeBlue);
      doc.fillColor("white").text("Total Marks", tableX + 10, startY + 7);
      doc.text(totalMarks.toString(), tableX + 400, startY + 7);

      /** === FILE STATUS PAGE (Optional) === **/
      if (includeFileStatus) {
        doc.addPage();
        doc.font("Helvetica-Bold").fontSize(16).fillColor(themeBlue).text("Uploaded Files Status", { underline: true });
        doc.moveDown();

        const fileKeys = ["studentProject", "innovationProject", "fdp", "fdpFunding"];
        fileKeys.forEach(key => {
          const files = record[key]?.[`${key}Files`] || [];
          if (files.length === 0) {
            doc.font("Helvetica-Oblique").fontSize(12).fillColor("red")
              .text(`${key}: No files uploaded`);
          } else {
            doc.font("Helvetica").fontSize(12).fillColor("black")
              .text(`${key}: ${files.length} file(s) uploaded`);
          }
          doc.moveDown(0.5);
        });
      }

      /** === FOOTER === **/
      doc.moveDown(2);
      doc.font("Helvetica-Oblique").fontSize(10).fillColor("black")
        .text("Generated by the Teaching Management System", { align: "center" });

      doc.end();
    } catch (err) {
      reject(err);
    }
  });
}

// === Merge PDF ===
async function mergeFormPDFs(record, formTitle, sections, fileKeys) {
  const buffer = await createStyledFormPDFBuffer(record, formTitle, sections, true);
  const merger = new PDFMerger();
  await merger.add(Uint8Array.from(buffer));

  const uploadsDir = path.join(__dirname, "..", "uploads");
  fileKeys.forEach((key) => {
    const files = record[key]?.[`${key}Files`] || [];
    files.forEach((fileName) => {
      const fullPath = path.join(uploadsDir, fileName);
      if (fs.existsSync(fullPath)) {
        merger.add(fullPath);
      }
    });
  });

  return merger.saveAsBuffer();
}

module.exports = { mergeFormPDFs, createStyledFormPDFBuffer };
